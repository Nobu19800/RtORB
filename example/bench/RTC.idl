/*
 * Copyright (c) 2008, AIST.
 * All rights reserved. This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * National Institute of Advanced Industrial Science and Technology (AIST)
 */
// RTC.idl
#include "SDOPackage.idl"

#pragma prefix "omg.org"

#define UNIQUE_ID_TYPE_NATIVE long

module RTC
{
  typedef SDOPackage::UniqueIdentifier UniqueIdentifier;
  typedef SDOPackage::NVList NVList;
  typedef UNIQUE_ID_TYPE_NATIVE UniqueId;

  enum ReturnCode_t
    {
      OK,
      ERROR,
      BAD_PARAMETER,
      UNSUPPORTED,
      OUT_OF_RESOURCES,
      PRECONDITION_NOT_MET
    };

      //      CREATED_STATE,
      //      FINALIZED_STATE
  enum LifeCycleState
    {
      INACTIVE_STATE,
      ACTIVE_STATE,
      ERROR_STATE,
      UNKNOWN_STATE
    };

  interface ExecutionContext;
  typedef sequence<ExecutionContext> ExecutionContextList;
  
  interface ComponentAction
  {
    ReturnCode_t on_initialize();
    ReturnCode_t on_finalize();
    ReturnCode_t on_startup(in UniqueId ec_id);
    ReturnCode_t on_shutdown(in UniqueId ec_id);
    ReturnCode_t on_activated(in UniqueId ec_id);
    ReturnCode_t on_deactivated(in UniqueId ec_id);
    ReturnCode_t on_aborting(in UniqueId ec_id);
    ReturnCode_t on_error(in UniqueId ec_id);
    ReturnCode_t on_reset(in UniqueId ec_id);
  };
  
  interface LightweightRTObject : ComponentAction
  {
    ReturnCode_t initialize();
    ReturnCode_t finalize();
    boolean is_alive();
    ReturnCode_t exit();
    ExecutionContextList get_contexts();
  };

  enum ExecutionKind
    {
      PERIODIC,
      EVENT_DRIVEN,
      OTHER
    };
  
  interface ExecutionContext
  {
    boolean is_running();
    ReturnCode_t start();
    ReturnCode_t stop();
    double get_rate();
    ReturnCode_t set_rate(in double rate);
    ReturnCode_t activate_component(in LightweightRTObject comp);
    ReturnCode_t deactivate_component(in LightweightRTObject comp);
    ReturnCode_t reset_component(in LightweightRTObject comp);
    LifeCycleState get_component_state(in LightweightRTObject comp);
    ExecutionKind get_kind();
    ReturnCode_t add(in LightweightRTObject comp);
    ReturnCode_t remove(in LightweightRTObject comp);
  };

  interface DataFlowComposite
  {
  };
  
  interface DataFlowComponentAction
  {
    ReturnCode_t on_execute(in UniqueId ec_id);
    ReturnCode_t on_state_update(in UniqueId ec_id);
    ReturnCode_t on_rate_changed(in UniqueId ec_id);
  };
  
  interface DataFlowParticipant : DataFlowComponentAction
  {
  };
  
  interface Fsm
  {
  };
  
  interface FsmComponentAction
  {
    ReturnCode_t on_transition(in LightweightRTObject comp,
			       in UniqueId ec_id);
  };
  
  interface FsmParticipant : FsmComponentAction
  {
  };
  
  interface Mode
  {
  };
  
  typedef sequence<Mode> ModeList;
  
  interface ModeCapable
  {
    Mode get_default_mode();
    Mode get_current_mode();
    Mode get_current_mode_in_context(in UniqueId ec_id);
    Mode get_pending_mode();
    Mode get_pending_mode_in_context(in UniqueId ec_id);
    ReturnCode_t set_mode(in Mode new_mode,
			  in boolean immediate);
  };
  
  interface MultiModeComponentAction
  {
    ReturnCode_t on_mode_changed(in LightweightRTObject comp,
				 in UniqueId ec_id);
  };
  
  interface MultiModeObject 
    : ModeCapable, MultiModeComponentAction
  {
  };
  
  interface RTObject;
  
  enum PortInterfacePolarity
    {
      PROVIDED,
      REQUIRED
    };
  
  struct PortInterfaceProfile
  {
    string instance_name;
    string type_name;
    PortInterfacePolarity polarity;
  };
  
  typedef sequence<PortInterfaceProfile> PortInterfaceProfileList;

  interface Port;

  typedef sequence<Port> PortList;

  typedef sequence<RTObject> RTCList;

  struct ConnectorProfile
  {
    string name;
    UniqueIdentifier connector_id;
    PortList ports;
    NVList properties;
  };
  
  typedef sequence<ConnectorProfile> ConnectorProfileList;

  struct PortProfile
  {
    string name;
    PortInterfaceProfileList interfaces;
    Port port_ref;
    ConnectorProfileList connector_profiles;
    RTObject owner;
    NVList properties;
  };
  
  typedef sequence<PortProfile> PortProfileList;
  
  struct ExecutionContextProfile
  {
    ExecutionKind kind;
    double rate;
    RTObject owner;
    RTCList participants;
    NVList properties;
  };
  
  typedef sequence<ExecutionContextProfile>
  
  ExecutionContextProfileList;
  
  struct ComponentProfile
  {
    string instance_name;
    string type_name;
    string description;
    string version;
    string vendor;
    string category;
    PortProfileList port_profiles;
    RTObject parent;
    NVList properties;
  };
  
  typedef sequence<ComponentProfile> ComponentProfileList;

  interface Port : SDOPackage::SDOService
  {
    PortProfile get_port_profile();
    ConnectorProfileList get_connector_profiles();
    ConnectorProfile get_connector_profile(in UniqueIdentifier connector_id);
    ReturnCode_t connect(inout ConnectorProfile connector_profile);
    ReturnCode_t notify_connect(inout ConnectorProfile connector_profile);
    ReturnCode_t disconnect(in UniqueIdentifier connector_id);
    ReturnCode_t notify_disconnect(in UniqueIdentifier connector_id);
    ReturnCode_t disconnect_all();
  };
  
  interface ExecutionContextService : ExecutionContext, SDOPackage::SDOService
  {
    ExecutionContextProfile get_profile();
  };
  
  typedef sequence<ExecutionContextService> ExecutionContextServiceList;
  
  interface RTObject : LightweightRTObject, SDOPackage::SDO
  {
    ComponentProfile get_component_profile();
    PortList get_ports();
    ExecutionContextServiceList get_execution_context_services();
    UniqueId set_execution_context_service(in ExecutionContextService ec);
  };


  interface DataFlowComponent
    : RTObject, DataFlowParticipant
  {
  };

};
