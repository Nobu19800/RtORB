// This file is generated by omniidl (C++ backend)- omniORB_4_0. Do not edit.
#ifndef __echo_hh__
#define __echo_hh__

#ifndef USE_omniORB_logStream
#define USE_omniORB_logStream
#endif

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_echo
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_echo
#endif






#ifdef USE_stub_in_nt_dll
#ifndef USE_core_stub_in_nt_dll
#define USE_core_stub_in_nt_dll
#endif
#ifndef USE_dyn_stub_in_nt_dll
#define USE_dyn_stub_in_nt_dll
#endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





typedef char* Istring;
typedef CORBA::String_var Istring_var;
typedef CORBA::String_out Istring_out;

struct NameComponent {
  typedef _CORBA_ConstrType_Variable_Var<NameComponent> _var_type;

  
  CORBA::String_member id;

  CORBA::String_member kind;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef NameComponent::_var_type NameComponent_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< NameComponent,NameComponent_var > NameComponent_out;

class Name_var;

class Name : public _CORBA_Unbounded_Sequence< NameComponent >  {
public:
  typedef Name_var _var_type;
  inline Name() {}
  inline Name(const Name& _s)
    : _CORBA_Unbounded_Sequence< NameComponent > (_s) {}

  inline Name(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< NameComponent > (_max) {}
  inline Name(_CORBA_ULong _max, _CORBA_ULong _len, NameComponent* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< NameComponent > (_max, _len, _val, _rel) {}



  inline Name& operator = (const Name& _s) {
    _CORBA_Unbounded_Sequence< NameComponent > ::operator=(_s);
    return *this;
  }
};

class Name_out;

class Name_var {
public:
  inline Name_var() : _pd_seq(0) {}
  inline Name_var(Name* _s) : _pd_seq(_s) {}
  inline Name_var(const Name_var& _s) {
    if( _s._pd_seq )  _pd_seq = new Name(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~Name_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline Name_var& operator = (Name* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline Name_var& operator = (const Name_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new Name;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline NameComponent& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline Name* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
  inline operator Name& () const { return *_pd_seq; }
#else
  inline operator const Name& () const { return *_pd_seq; }
  inline operator Name& () { return *_pd_seq; }
#endif
    
  inline const Name& in() const { return *_pd_seq; }
  inline Name&       inout()    { return *_pd_seq; }
  inline Name*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline Name* _retn() { Name* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class Name_out;
  
private:
  Name* _pd_seq;
};

class Name_out {
public:
  inline Name_out(Name*& _s) : _data(_s) { _data = 0; }
  inline Name_out(Name_var& _s)
    : _data(_s._pd_seq) { _s = (Name*) 0; }
  inline Name_out(const Name_out& _s) : _data(_s._data) {}
  inline Name_out& operator = (const Name_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline Name_out& operator = (Name* _s) {
    _data = _s;
    return *this;
  }
  inline operator Name*&()  { return _data; }
  inline Name*& ptr()       { return _data; }
  inline Name* operator->() { return _data; }

  inline NameComponent& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  Name*& _data;

private:
  Name_out();
  Name_out& operator=(const Name_var&);
};

#ifndef __Echo__
#define __Echo__

class Echo;
class _objref_Echo;
class _impl_Echo;

typedef _objref_Echo* Echo_ptr;
typedef Echo_ptr EchoRef;

class Echo_Helper {
public:
  typedef Echo_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_Echo, Echo_Helper> Echo_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_Echo,Echo_Helper > Echo_out;

#endif

class Echo {
public:
  // Declarations for this interface type.
  typedef Echo_ptr _ptr_type;
  typedef Echo_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(CORBA::Object_ptr);
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_Echo :
  public virtual CORBA::Object, public virtual omniObjRef
{
public:
  char* echoString(const char* mesg);
  char* echoString2(const char* mesg, CORBA::String_out res);
  char* echoString3(CORBA::String_INOUT_arg mesg);
  CORBA::Long plus(CORBA::Long x, CORBA::Long y);
  void plus2(CORBA::Long x, CORBA::Long y, CORBA::Long& ans);
  CORBA::Float divide(CORBA::Float x, CORBA::Float y);
  void divide2(CORBA::Float x, CORBA::Float y, CORBA::Float& ans);
  void bind(const Name& n, ::CORBA::Object_ptr obj);

  inline _objref_Echo()  { _PR_setobj(0); }  // nil
  _objref_Echo(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_Echo();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_Echo(const _objref_Echo&);
  _objref_Echo& operator = (const _objref_Echo&);
  // not implemented

  friend class Echo;
};

class _pof_Echo : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_Echo() : _OMNI_NS(proxyObjectFactory)(Echo::_PD_repoId) {}
  virtual ~_pof_Echo();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_Echo :
  public virtual omniServant
{
public:
  virtual ~_impl_Echo();

  virtual char* echoString(const char* mesg) = 0;
  virtual char* echoString2(const char* mesg, CORBA::String_out res) = 0;
  virtual char* echoString3(char*& mesg) = 0;
  virtual CORBA::Long plus(CORBA::Long x, CORBA::Long y) = 0;
  virtual void plus2(CORBA::Long x, CORBA::Long y, CORBA::Long& ans) = 0;
  virtual CORBA::Float divide(CORBA::Float x, CORBA::Float y) = 0;
  virtual void divide2(CORBA::Float x, CORBA::Float y, CORBA::Float& ans) = 0;
  virtual void bind(const Name& n, ::CORBA::Object_ptr obj) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
};




class POA_Echo :
  public virtual _impl_Echo,
  public virtual PortableServer::ServantBase
{
public:
  virtual ~POA_Echo();

  inline ::Echo_ptr _this() {
    return (::Echo_ptr) _do_this(::Echo::_PD_repoId);
  }
};





#undef _core_attr
#undef _dyn_attr



inline void
Echo::_marshalObjRef(::Echo_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_echo
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_echo
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_echo
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_echo
#endif

#endif  // __echo_hh__

