/*
 * Copyright (c) 2008, AIST.
 * All rights reserved. This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * National Institute of Advanced Industrial Science and Technology (AIST)
 */
// This file is generated by omniidl (C++ backend)- omniORB_4_0. Do not edit.

#include "Sequence.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_0;



SequenceTest::Tester_ptr SequenceTest::Tester_Helper::_nil() {
  return ::SequenceTest::Tester::_nil();
}

CORBA::Boolean SequenceTest::Tester_Helper::is_nil(::SequenceTest::Tester_ptr p) {
  return CORBA::is_nil(p);

}

void SequenceTest::Tester_Helper::release(::SequenceTest::Tester_ptr p) {
  CORBA::release(p);
}

void SequenceTest::Tester_Helper::duplicate(::SequenceTest::Tester_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

void SequenceTest::Tester_Helper::marshalObjRef(::SequenceTest::Tester_ptr obj, cdrStream& s) {
  ::SequenceTest::Tester::_marshalObjRef(obj, s);
}

SequenceTest::Tester_ptr SequenceTest::Tester_Helper::unmarshalObjRef(cdrStream& s) {
  return ::SequenceTest::Tester::_unmarshalObjRef(s);
}

SequenceTest::Tester_ptr
SequenceTest::Tester::_duplicate(::SequenceTest::Tester_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}


SequenceTest::Tester_ptr
SequenceTest::Tester::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


SequenceTest::Tester_ptr
SequenceTest::Tester::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}


SequenceTest::Tester_ptr
SequenceTest::Tester::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Tester _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Tester* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Tester;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* SequenceTest::Tester::_PD_repoId = "IDL:SequenceTest/Tester:1.0";


SequenceTest::_objref_Tester::~_objref_Tester() {}


SequenceTest::_objref_Tester::_objref_Tester(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::SequenceTest::Tester::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
SequenceTest::_objref_Tester::_ptrToObjRef(const char* id)
{
  if( id == ::SequenceTest::Tester::_PD_repoId )
    return (::SequenceTest::Tester_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::SequenceTest::Tester::_PD_repoId) )
    return (::SequenceTest::Tester_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cSequenceTest_mLongSeq
class _0RL_cd_19F0D310E1A5FEF9_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_19F0D310E1A5FEF9_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall) {}
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  SequenceTest::LongSeq_var result;
};

void _0RL_cd_19F0D310E1A5FEF9_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const SequenceTest::LongSeq&) result >>= _n;

}

void _0RL_cd_19F0D310E1A5FEF9_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new SequenceTest::LongSeq;
  (SequenceTest::LongSeq&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_19F0D310E1A5FEF9_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_19F0D310E1A5FEF9_00000000* tcd = (_0RL_cd_19F0D310E1A5FEF9_00000000*)cd;
  SequenceTest::_impl_Tester* impl = (SequenceTest::_impl_Tester*) svnt->_ptrToInterface(SequenceTest::Tester::_PD_repoId);
  tcd->result = impl->ret();


}

SequenceTest::LongSeq* SequenceTest::_objref_Tester::ret()
{
  _0RL_cd_19F0D310E1A5FEF9_00000000 _call_desc(_0RL_lcfn_19F0D310E1A5FEF9_10000000, "ret", 4);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_o_cSequenceTest_mLongSeq
class _0RL_cd_19F0D310E1A5FEF9_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_19F0D310E1A5FEF9_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall) {}
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  SequenceTest::LongSeq_var arg_0;
};

void _0RL_cd_19F0D310E1A5FEF9_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const SequenceTest::LongSeq&) arg_0 >>= _n;

}

void _0RL_cd_19F0D310E1A5FEF9_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new SequenceTest::LongSeq;
  (SequenceTest::LongSeq&)arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_19F0D310E1A5FEF9_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_19F0D310E1A5FEF9_20000000* tcd = (_0RL_cd_19F0D310E1A5FEF9_20000000*)cd;
  SequenceTest::_impl_Tester* impl = (SequenceTest::_impl_Tester*) svnt->_ptrToInterface(SequenceTest::Tester::_PD_repoId);
  impl->get(tcd->arg_0.out());


}

void SequenceTest::_objref_Tester::get(LongSeq_out p)
{
  _0RL_cd_19F0D310E1A5FEF9_20000000 _call_desc(_0RL_lcfn_19F0D310E1A5FEF9_30000000, "get", 4);


  _invoke(_call_desc);
  p = _call_desc.arg_0._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cSequenceTest_mLongSeq
class _0RL_cd_19F0D310E1A5FEF9_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_19F0D310E1A5FEF9_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall) {}
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  SequenceTest::LongSeq_var arg_0_;
  const SequenceTest::LongSeq* arg_0;
};

void _0RL_cd_19F0D310E1A5FEF9_40000000::marshalArguments(cdrStream& _n)
{
  (const SequenceTest::LongSeq&) *arg_0 >>= _n;

}

void _0RL_cd_19F0D310E1A5FEF9_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new SequenceTest::LongSeq;
  (SequenceTest::LongSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_19F0D310E1A5FEF9_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_19F0D310E1A5FEF9_40000000* tcd = (_0RL_cd_19F0D310E1A5FEF9_40000000*)cd;
  SequenceTest::_impl_Tester* impl = (SequenceTest::_impl_Tester*) svnt->_ptrToInterface(SequenceTest::Tester::_PD_repoId);
  impl->set(*tcd->arg_0);


}

void SequenceTest::_objref_Tester::set(const LongSeq& p)
{
  _0RL_cd_19F0D310E1A5FEF9_40000000 _call_desc(_0RL_lcfn_19F0D310E1A5FEF9_50000000, "set", 4);
  _call_desc.arg_0 = &(LongSeq&) p;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_n_cSequenceTest_mLongSeq
class _0RL_cd_19F0D310E1A5FEF9_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_19F0D310E1A5FEF9_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall) {}
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  SequenceTest::LongSeq_var arg_0_;
  SequenceTest::LongSeq* arg_0;
};

void _0RL_cd_19F0D310E1A5FEF9_60000000::marshalArguments(cdrStream& _n)
{
  (const SequenceTest::LongSeq&) *arg_0 >>= _n;

}

void _0RL_cd_19F0D310E1A5FEF9_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new SequenceTest::LongSeq;
  (SequenceTest::LongSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.inout();

}

void _0RL_cd_19F0D310E1A5FEF9_60000000::marshalReturnedValues(cdrStream& _n)
{
  (const SequenceTest::LongSeq&) *arg_0 >>= _n;

}

void _0RL_cd_19F0D310E1A5FEF9_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  (SequenceTest::LongSeq&)*arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_19F0D310E1A5FEF9_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_19F0D310E1A5FEF9_60000000* tcd = (_0RL_cd_19F0D310E1A5FEF9_60000000*)cd;
  SequenceTest::_impl_Tester* impl = (SequenceTest::_impl_Tester*) svnt->_ptrToInterface(SequenceTest::Tester::_PD_repoId);
  impl->update(*tcd->arg_0);


}

void SequenceTest::_objref_Tester::update(LongSeq& p)
{
  _0RL_cd_19F0D310E1A5FEF9_60000000 _call_desc(_0RL_lcfn_19F0D310E1A5FEF9_70000000, "update", 7);
  _call_desc.arg_0 = &(LongSeq&) p;

  _invoke(_call_desc);



}
SequenceTest::_pof_Tester::~_pof_Tester() {}


omniObjRef*
SequenceTest::_pof_Tester::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::SequenceTest::_objref_Tester(ior, id);
}


CORBA::Boolean
SequenceTest::_pof_Tester::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::SequenceTest::Tester::_PD_repoId) )
    return 1;
  
  return 0;
}

const SequenceTest::_pof_Tester _the_pof_SequenceTest_mTester;

SequenceTest::_impl_Tester::~_impl_Tester() {}


CORBA::Boolean
SequenceTest::_impl_Tester::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "ret") ) {

    _0RL_cd_19F0D310E1A5FEF9_00000000 _call_desc(_0RL_lcfn_19F0D310E1A5FEF9_10000000, "ret", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get") ) {

    _0RL_cd_19F0D310E1A5FEF9_20000000 _call_desc(_0RL_lcfn_19F0D310E1A5FEF9_30000000, "get", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set") ) {

    _0RL_cd_19F0D310E1A5FEF9_40000000 _call_desc(_0RL_lcfn_19F0D310E1A5FEF9_50000000, "set", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "update") ) {

    _0RL_cd_19F0D310E1A5FEF9_60000000 _call_desc(_0RL_lcfn_19F0D310E1A5FEF9_70000000, "update", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
SequenceTest::_impl_Tester::_ptrToInterface(const char* id)
{
  if( id == ::SequenceTest::Tester::_PD_repoId )
    return (::SequenceTest::_impl_Tester*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::SequenceTest::Tester::_PD_repoId) )
    return (::SequenceTest::_impl_Tester*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
SequenceTest::_impl_Tester::_mostDerivedRepoId()
{
  return ::SequenceTest::Tester::_PD_repoId;
}

POA_SequenceTest::Tester::~Tester() {}

